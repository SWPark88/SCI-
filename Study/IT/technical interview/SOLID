# SOLID 설계 원칙

#단일 책임 원칙 (Single Responsibility Principle)
클래스는 단 1개의 책임만 가져야 하며 변경되는 이유도 1개여야 한다는 원칙
각 클래스는 하나의 목적만 가져야한다.
예로 카드결제, 포인트결제 라는 두 개의 기능이 하나의 클래스에 구현되어 있고
카드결제는 외부와 통신, 포인트결제는 내부 처리를 하며,
카드사의 인터페이스가 변동되었다고 가정한다면
카드결제기능 뿐만 아니라 포인트결제라는 별도의 기능에도 영향이 발생할 수 있다.

#개방 폐쇄 원칙 (Open-Closed Principle)
해당 원칙은 확장에는 열려 있어야 하고 변경에는 닫혀 있어야 합니다. 즉, 기능을 추가/변경은 가능해야 하지만 이 기능을 사용하는 코드(기존 코드)는 변경하지 않아야 한다는 의미
각 클래스는 클래스의 수정을 폐쇄하고 확장을 개방해야 한다.
예로 초기 요건정의에 현금결제기능만 포함되어 있고
향후 포인트결제기능이 추가되었다 가정하였을때
포인트결제기능을 현금결제기능에 포함시킨다면
운영단계에서는 서비스에 영향이 발생하고
개발 이후에 공정에서는 공정이 회귀하는 문제가 발생한다.

#리스코프 원칙 법칙 (Liskov Substitution Principle)

상위 클래스는 하위 클래스를 대체 할 수 있어야 한다.

#인터페이스 분리 원칙 (Interface Segregation Principle)
#의존 관계 역전 원칙 (Dependency Inversion Principle)
